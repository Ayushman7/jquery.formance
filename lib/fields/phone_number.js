// Generated by CoffeeScript 1.6.2
(function() {
  var $, formatBackPhoneNumber, formatPastePhoneNumber, formatPhoneNumber, reFormatPhoneNumber, restrictPhoneNumber;

  $ = jQuery;

  reFormatPhoneNumber = function(phoneNumberString) {
    var areaCode, first3, last4, phoneNumber, text, _ref;

    _ref = phoneNumberString.replace(/\D/g, '').match(/^(\d{0,3})?(\d{0,3})?(\d{0,4})?$/), phoneNumber = _ref[0], areaCode = _ref[1], first3 = _ref[2], last4 = _ref[3];
    text = '';
    if (areaCode != null) {
      text += "(" + areaCode;
    }
    if ((areaCode != null ? areaCode.length : void 0) === 3) {
      text += ") ";
    }
    if (first3 != null) {
      text += "" + first3;
    }
    if ((first3 != null ? first3.length : void 0) === 3) {
      text += " - ";
    }
    if (last4 != null) {
      text += "" + last4;
    }
    return text;
  };

  restrictPhoneNumber = function(e) {
    var $target, digit, value;

    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 10) {
      return false;
    }
  };

  formatPhoneNumber = function(e) {
    var $target, digit, text, val;

    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val() + digit;
    text = reFormatPhoneNumber(val);
    e.preventDefault();
    return $target.val(text);
  };

  formatBackPhoneNumber = function(e) {
    var $target, value;

    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\(\d$/.test(value)) {
      e.preventDefault();
      return $target.val('');
    } else if (/\d\)(\s)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d\)(\s)*$/, ''));
    } else if (/\d(\s|\-)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d(\s|\-)+$/, ''));
    }
  };

  formatPastePhoneNumber = function(e) {
    var _this = this;

    return setTimeout(function() {
      var $target, text, val;

      $target = $(e.currentTarget);
      val = $target.val();
      text = reFormatPhoneNumber(val);
      return $target.val(text);
    });
  };

  $.fn.formance.phoneNumber = {
    format: function() {
      this.formatters('restrictNumeric');
      this.on('keypress', restrictPhoneNumber);
      this.on('keypress', formatPhoneNumber);
      this.on('keydown', formatBackPhoneNumber);
      this.on('paste', formatPastePhoneNumber);
      return this;
    },
    validate: function() {
      var val;

      val = $(this).val();
      val = val.replace(/\(|\)|\s+|-/g, '');
      if (!/^\d+$/.test(val)) {
        return false;
      }
      return val.replace(/\D/g, '').length === 10;
    }
  };

}).call(this);
