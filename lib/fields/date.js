// Generated by CoffeeScript 1.6.2
(function() {
  var $, formatBackDate, formatDate, formatForwardDate, formatForwardSlash, hasTextSelected, restrictDate;

  $ = jQuery;

  hasTextSelected = $.formance.fn.hasTextSelected;

  restrictDate = function(e) {
    var $target, digit, value;

    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 8) {
      return false;
    }
  };

  formatDate = function(e) {
    var $target, digit, old_val, val;

    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    old_val = $target.val();
    val = old_val + digit;
    if (/^\d$/.test(val) && (digit !== '0' && digit !== '1' && digit !== '2' && digit !== '3')) {
      e.preventDefault();
      return $target.val("0" + val + " / ");
    } else if (/^\d{2}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " / ");
    } else if (/^\d{2}\s\/\s\d$/.test(val) && (digit !== '0' && digit !== '1')) {
      e.preventDefault();
      return $target.val("" + old_val + "0" + digit + " / ");
    } else if (/^\d{2}\s\/\s\d{2}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " / ");
    }
  };

  formatForwardDate = function(e) {
    var $target, digit, val;

    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    if (/^\d{2}$/.test(val) || /^\d{2}\s\/\s\d{2}$/.test(val)) {
      return $target.val("" + val + " / ");
    }
  };

  formatForwardSlash = function(e) {
    var $target, date, day, month, parse_day, parse_month, slash, val, _ref;

    slash = String.fromCharCode(e.which);
    if (slash !== '/') {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    parse_day = /^(\d)$/;
    parse_month = /^(\d{2})\s\/\s(\d)$/;
    if (parse_day.test(val) && val !== '0') {
      return $target.val("0" + val + " / ");
    } else if (parse_month.test(val)) {
      _ref = val.match(parse_month), date = _ref[0], day = _ref[1], month = _ref[2];
      if (month !== '0') {
        return $target.val("" + day + " / 0" + month + " / ");
      }
    }
  };

  formatBackDate = function(e) {
    var $target, value;

    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d(\s|\/)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d(\s|\/)*$/, ''));
    } else if (/\s\/\s?\d?$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\s\/\s?\d?$/, ''));
    }
  };

  $.formance.fn.formatDate = function() {
    this.formance('restrictNumeric');
    this.on('keypress', restrictDate);
    this.on('keypress', formatDate);
    this.on('keypress', formatForwardSlash);
    this.on('keypress', formatForwardDate);
    this.on('keydown', formatBackDate);
    return this;
  };

  $.formance.validateDate = function(day, month, year) {
    if ((day == null) || isNaN(day) || (month == null) || isNaN(month) || (year == null) || isNaN(year)) {
      return false;
    }
    if (!(((0 < day && day <= 31)) && ((0 < month && month <= 12)) && ((1000 < year && year <= 10000)))) {
      return false;
    }
    return true;
  };

  $.formance.dateVal = function(dateString) {
    var day, month, year, _ref;

    _ref = dateString != null ? dateString.replace(/\s/g, '').split('/', 3) : [NaN, NaN, NaN], day = _ref[0], month = _ref[1], year = _ref[2];
    day = parseInt(day, 10);
    month = parseInt(month, 10);
    year = parseInt(year, 10);
    return {
      day: day,
      month: month,
      year: year
    };
  };

}).call(this);
