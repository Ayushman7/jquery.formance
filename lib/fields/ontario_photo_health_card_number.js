// Generated by CoffeeScript 1.6.2
(function() {
  var $, formatBackOntarioPhotoHealthCardNumber, formatOntarioPhotoHealthCardNumber, formatPasteOntarioPhotoHealthCardNumber, restrictOntarioPhotoHealthCardNumber;

  $ = jQuery;

  restrictOntarioPhotoHealthCardNumber = function(e) {
    var $target, char, value;

    $target = $(e.currentTarget);
    char = String.fromCharCode(e.which);
    if (!/^[a-zA-Z\d]+$/.test(char)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + char;
    value = value.replace(/[^a-zA-Z\d]/g, '');
    if (value.length > 12) {
      return false;
    }
  };

  formatOntarioPhotoHealthCardNumber = function(e) {
    var $target, char, old_val, val;

    char = String.fromCharCode(e.which);
    if (!/^[a-zA-Z\d]+$/.test(char)) {
      return;
    }
    $target = $(e.currentTarget);
    old_val = $target.val();
    val = old_val + char.toUpperCase();
    if (/^\d{4}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " - ");
    } else if (/^\d{4}[\s|\-]*\d{3}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " - ");
    } else if (/^\d{4}[\s|\-]*\d{3}[\s|\-]*d{3}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " - ");
    }
  };

  formatBackOntarioPhotoHealthCardNumber = function(e) {
    var $target, value;

    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d(\s|\-)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d(\s|\-)+$/, ''));
    } else if (/\s\-\s?[A-Za-z\d]?$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\s\-\s?[A-Za-z\d]?$/, ''));
    }
  };

  formatPasteOntarioPhotoHealthCardNumber = function(e) {
    var _this = this;

    return setTimeout(function() {
      var $target, first_four, full, last_two, second_three, third_three, val, _ref;

      $target = $(e.currentTarget);
      val = $target.val();
      _ref = val.match(/^(\d{4})[\s|\-]*?(\d{3})[\s|\-]*?(\d{3})[\s|\-]*?([A-Za-z]{2})$/), full = _ref[0], first_four = _ref[1], second_three = _ref[2], third_three = _ref[3], last_two = _ref[4];
      return $target.val("" + first_four + " - " + second_three + " - " + third_three + " - " + last_two);
    });
  };

  $.fn.formance.ontarioPhotoHealthCardNumber = {
    format: function() {
      this.formatters('restrictAlphaNumeric');
      this.on('keypress', restrictOntarioPhotoHealthCardNumber);
      this.on('keypress', formatOntarioPhotoHealthCardNumber);
      this.on('keydown', formatBackOntarioPhotoHealthCardNumber);
      this.on('paste', formatPasteOntarioPhotoHealthCardNumber);
      return this;
    },
    validate: function() {
      var regex, val;

      val = $(this).val();
      if (val == null) {
        return false;
      }
      val = val.replace(/[\s|\-]/g, '');
      if (!/^[a-zA-Z\d]+$/.test()) {
        return false;
      }
      regex = /^(\d{4})[\s|\-]*?(\d{3})[\s|\-]*?(\d{3})[\s|\-]*?([A-Za-z]{2})$/;
      return regest.test(val);
    }
  };

}).call(this);
