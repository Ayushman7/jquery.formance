// Generated by CoffeeScript 1.6.2
(function() {
  var $, hasTextSelected, restrictAlphaNumeric, restrictNumeric,
    __slice = [].slice;

  $ = jQuery;

  $.formance = {};

  $.formance.fn = {};

  $.fn.formance = function() {
    var args, method;

    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return $.formance.fn[method].apply(this, args);
  };

  restrictNumeric = function(e) {
    var $target, input;

    $target = $(e.target);
    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\s]/.test(input);
  };

  restrictAlphaNumeric = function(e) {
    var $target, input;

    $target = $(e.target);
    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\sA-Za-z]/.test(input);
  };

  hasTextSelected = function($target) {
    var _ref;

    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
      return true;
    }
    if (typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? typeof _ref.createRange === "function" ? _ref.createRange().text : void 0 : void 0 : void 0) {
      return true;
    }
    return false;
  };

  $.formance.fn.restrictNumeric = function() {
    this.on('keypress', restrictNumeric);
    return this;
  };

  $.formance.fn.restrictAlphaNumeric = function() {
    this.on('keypress', restrictAlphaNumeric);
    return this;
  };

  $.formance.fn.hasTextSelected = hasTextSelected;

}).call(this);
