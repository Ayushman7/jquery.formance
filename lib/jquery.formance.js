// Generated by CoffeeScript 1.6.2
(function() {
  var $, AlphanumericFormanceField, CreditCardCVCField, CreditCardExpiryField, CreditCardNumberField, DateDDMMMYYYYField, DateYYYYMMDDField, EmailField, FormanceField, NumberField, NumericFormanceField, OntarioDriversLicenseNumberField, OntarioOutdoorsCardNumberField, OntarioPhotoHealthCardNumberField, PhoneNumberField, PostalCodeField, cards, defaultFormat, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $.formance = {};

  $.formance.fn = {};

  $.fn.formance = function() {
    var args, method;

    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return $.formance.fn[method].apply(this, args);
  };

  FormanceField = (function() {
    function FormanceField(field, regex, replace_regex) {
      this.field = field;
      this.regex = regex;
      this.replace_regex = replace_regex;
      this.restrict = __bind(this.restrict, this);
      this.has_text_selected = __bind(this.has_text_selected, this);
      this.end_of_text = __bind(this.end_of_text, this);
      this.format_paste = __bind(this.format_paste, this);
      this.format_backspace = __bind(this.format_backspace, this);
      this.format_forward_slash = __bind(this.format_forward_slash, this);
      this.format_forward = __bind(this.format_forward, this);
      this.format_field = __bind(this.format_field, this);
      this.restrict_field = __bind(this.restrict_field, this);
    }

    FormanceField.prototype.restrict_field = function(e) {
      var $target, input, value;

      $target = $(e.currentTarget);
      input = String.fromCharCode(e.which);
      if (!this.regex.test(input)) {
        return;
      }
      if (this.has_text_selected($target)) {
        return;
      }
      value = $target.val() + input;
      value = value.replace(this.replace_regex, '');
      return this.restrict_field_callback(e, value);
    };

    FormanceField.prototype.format_field = function(e) {
      var $target, input, new_val, old_val;

      input = String.fromCharCode(e.which);
      if (!this.regex.test(input)) {
        return;
      }
      $target = $(e.currentTarget);
      old_val = $target.val();
      new_val = old_val + input;
      if (this.end_of_text($target)) {
        return;
      }
      return this.format_field_callback(e, $target, old_val, input, new_val);
    };

    FormanceField.prototype.format_forward = function(e) {
      var $target, input, val;

      input = String.fromCharCode(e.which);
      if (!this.regex.test(input)) {
        return;
      }
      $target = $(e.currentTarget);
      val = $target.val();
      return this.format_forward_callback(e, $target, val);
    };

    FormanceField.prototype.format_forward_slash = function(e) {
      var $target, slash, val;

      slash = String.fromCharCode(e.which);
      if (slash !== '/') {
        return;
      }
      $target = $(e.currentTarget);
      val = $target.val();
      return this.format_forward_slash_callback(e, $target, val);
    };

    FormanceField.prototype.format_backspace = function(e) {
      var $target, value;

      if (e.meta) {
        return;
      }
      $target = $(e.currentTarget);
      value = $target.val();
      if (e.which !== 8) {
        return;
      }
      if (this.end_of_text($target)) {
        return;
      }
      return this.format_backspace_callback(e, $target, value);
    };

    FormanceField.prototype.format_paste = function(e) {
      var _this = this;

      return setTimeout(function() {
        var $target, val;

        $target = $(e.currentTarget);
        val = $target.val();
        return _this.format_paste_callback(e, $target, val);
      });
    };

    FormanceField.prototype.format = function() {
      if (this.restrict_field_callback != null) {
        this.field.on('keypress', this.restrict_field);
      }
      if (this.format_field_callback != null) {
        this.field.on('keypress', this.format_field);
      }
      if (this.format_forward_callback != null) {
        this.field.on('keypress', this.format_forward);
      }
      if (this.format_forward_slash_callback != null) {
        this.field.on('keypress', this.format_forward_slash);
      }
      if (this.format_backspace_callback != null) {
        this.field.on('keydown', this.format_backspace);
      }
      if (this.format_paste_callback != null) {
        return this.field.on('paste', this.format_paste);
      }
    };

    FormanceField.prototype.end_of_text = function($target) {
      return ($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length;
    };

    FormanceField.prototype.has_text_selected = function($target) {
      var _ref;

      if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
        return true;
      }
      if (typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? typeof _ref.createRange === "function" ? _ref.createRange().text : void 0 : void 0 : void 0) {
        return true;
      }
      return false;
    };

    FormanceField.prototype.restrict = function(regex, e) {
      var $target, input;

      $target = $(e.target);
      if (e.metaKey || e.ctrlKey) {
        return true;
      }
      if (e.which === 32) {
        return false;
      }
      if (e.which === 0) {
        return true;
      }
      if (e.which < 33) {
        return true;
      }
      input = String.fromCharCode(e.which);
      return !!regex.test(input);
    };

    return FormanceField;

  })();

  NumericFormanceField = (function(_super) {
    __extends(NumericFormanceField, _super);

    function NumericFormanceField(field) {
      this.field = field;
      this.restrict_numeric = __bind(this.restrict_numeric, this);
      NumericFormanceField.__super__.constructor.call(this, this.field, /^\d+$/, /\D/g);
    }

    NumericFormanceField.prototype.restrict_numeric = function(e) {
      return this.restrict(/[\d\s]/, e);
    };

    NumericFormanceField.prototype.format = function() {
      this.field.on('keypress', this.restrict_numeric);
      return NumericFormanceField.__super__.format.apply(this, arguments);
    };

    return NumericFormanceField;

  })(FormanceField);

  AlphanumericFormanceField = (function(_super) {
    __extends(AlphanumericFormanceField, _super);

    function AlphanumericFormanceField(field) {
      this.field = field;
      this.restrict_alphanumeric = __bind(this.restrict_alphanumeric, this);
      AlphanumericFormanceField.__super__.constructor.call(this, this.field, /^[A-Za-z\d]+$/, /[^A-Za-z\d]/g);
    }

    AlphanumericFormanceField.prototype.restrict_alphanumeric = function(e) {
      return this.restrict(/[\d\sA-Za-z]/, e);
    };

    AlphanumericFormanceField.prototype.format = function() {
      this.field.on('keypress', this.restrict_alphanumeric);
      return AlphanumericFormanceField.__super__.format.apply(this, arguments);
    };

    return AlphanumericFormanceField;

  })(FormanceField);

  $ = jQuery;

  defaultFormat = /(\d{1,4})/g;

  cards = [
    {
      type: 'maestro',
      pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dinersclub',
      pattern: /^(36|38|30[0-5])/,
      format: defaultFormat,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'laser',
      pattern: /^(6706|6771|6709)/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'jcb',
      pattern: /^35/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      pattern: /^62/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'discover',
      pattern: /^(6011|65|64[4-9]|622)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      pattern: /^5[1-5]/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'amex',
      pattern: /^3[47]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [3, 4],
      luhn: true
    }, {
      type: 'visa',
      pattern: /^4/,
      format: defaultFormat,
      length: [13, 14, 15, 16],
      cvcLength: [3],
      luhn: true
    }
  ];

  CreditCardCVCField = (function(_super) {
    __extends(CreditCardCVCField, _super);

    function CreditCardCVCField() {
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref = CreditCardCVCField.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CreditCardCVCField.prototype.restrict_field_callback = function(e, val) {
      return val.length <= 4;
    };

    CreditCardCVCField.prototype.validate = function() {
      var cvc, type, _ref1, _ref2;

      type = this.field.data('credit_card_type');
      cvc = this.field.val();
      cvc = $.trim(cvc);
      if (!/^\d+$/.test(cvc)) {
        return false;
      }
      if (type) {
        return _ref1 = cvc.length, __indexOf.call((_ref2 = this.card_from_type(type)) != null ? _ref2.cvcLength : void 0, _ref1) >= 0;
      } else {
        return cvc.length >= 3 && cvc.length <= 4;
      }
    };

    CreditCardCVCField.prototype.card_from_type = function(type) {
      var card, _i, _len;

      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        if (card.type === type) {
          return card;
        }
      }
    };

    return CreditCardCVCField;

  })(NumericFormanceField);

  $.formance.fn.format_credit_card_cvc = function() {
    var field;

    field = new CreditCardCVCField(this);
    return field.format();
  };

  this;

  $.formance.fn.validate_credit_card_cvc = function() {
    var field;

    field = new CreditCardCVCField(this);
    return field.validate();
  };

  $ = jQuery;

  CreditCardExpiryField = (function(_super) {
    __extends(CreditCardExpiryField, _super);

    function CreditCardExpiryField() {
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_forward_slash_callback = __bind(this.format_forward_slash_callback, this);
      this.format_forward_callback = __bind(this.format_forward_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref1 = CreditCardExpiryField.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    CreditCardExpiryField.prototype.restrict_field_callback = function(e, val) {
      if (val.length > 6) {
        return false;
      }
    };

    CreditCardExpiryField.prototype.format_field_callback = function(e, $target, old_val, digit, new_val) {
      if (/^\d$/.test(new_val) && (new_val !== '0' && new_val !== '1')) {
        e.preventDefault();
        return $target.val("0" + new_val + " / ");
      } else if (/^\d\d$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " / ");
      }
    };

    CreditCardExpiryField.prototype.format_forward_callback = function(e, $target, val) {
      if (/^\d\d$/.test(val)) {
        return $target.val("" + val + " / ");
      }
    };

    CreditCardExpiryField.prototype.format_forward_slash_callback = function(e, $target, val) {
      if (/^\d$/.test(val) && val !== '0') {
        return $target.val("0" + val + " / ");
      }
    };

    CreditCardExpiryField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\d(\s|\/)+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\d(\s|\/)*$/, ''));
      } else if (/\s\/\s?\d?$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\s\/\s?\d?$/, ''));
      }
    };

    CreditCardExpiryField.prototype.validate = function() {
      var currentTime, expiry, expiry_date, month, prefix, year, _ref2;

      expiry_date = this.parse_expiry(this.field.val());
      month = expiry_date.month;
      year = expiry_date.year;
      if (typeof month === 'object' && 'month' in month) {
        _ref2 = month, month = _ref2.month, year = _ref2.year;
      }
      if (!(month && year)) {
        return false;
      }
      month = $.trim(month);
      year = $.trim(year);
      if (!/^\d+$/.test(month)) {
        return false;
      }
      if (!/^\d+$/.test(year)) {
        return false;
      }
      if (!(parseInt(month, 10) <= 12)) {
        return false;
      }
      if (year.length === 2) {
        prefix = (new Date).getFullYear();
        prefix = prefix.toString().slice(0, 2);
        year = prefix + year;
      }
      expiry = new Date(year, month);
      currentTime = new Date;
      expiry.setMonth(expiry.getMonth() - 1);
      expiry.setMonth(expiry.getMonth() + 1, 1);
      return expiry > currentTime;
    };

    CreditCardExpiryField.prototype.val = function() {
      var expiry;

      expiry = this.parse_expiry(this.field.val());
      if ((expiry.month == null) || isNaN(expiry.month)) {
        return false;
      }
      if ((expiry.year == null) || isNaN(expiry.year)) {
        return false;
      }
      return new Date(expiry.year, expiry.month - 1);
    };

    CreditCardExpiryField.prototype.parse_expiry = function(expiry_string) {
      var month, prefix, val, year, _ref2;

      val = expiry_string.replace(/\s/g, '');
      _ref2 = val.split('/', 2), month = _ref2[0], year = _ref2[1];
      if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
        prefix = (new Date).getFullYear();
        prefix = prefix.toString().slice(0, 2);
        year = prefix + year;
      }
      month = parseInt(month, 10);
      year = parseInt(year, 10);
      return {
        month: month,
        year: year
      };
    };

    return CreditCardExpiryField;

  })(NumericFormanceField);

  $.formance.fn.format_credit_card_expiry = function() {
    var field;

    field = new CreditCardExpiryField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_credit_card_expiry = function() {
    var field;

    field = new CreditCardExpiryField(this);
    return field.validate();
  };

  $.formance.fn.val_credit_card_expiry = function() {
    var field;

    field = new CreditCardExpiryField(this);
    return field.val();
  };

  $ = jQuery;

  defaultFormat = /(\d{1,4})/g;

  cards = [
    {
      type: 'maestro',
      pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dinersclub',
      pattern: /^(36|38|30[0-5])/,
      format: defaultFormat,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'laser',
      pattern: /^(6706|6771|6709)/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'jcb',
      pattern: /^35/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      pattern: /^62/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'discover',
      pattern: /^(6011|65|64[4-9]|622)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      pattern: /^5[1-5]/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'amex',
      pattern: /^3[47]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [3, 4],
      luhn: true
    }, {
      type: 'visa',
      pattern: /^4/,
      format: defaultFormat,
      length: [13, 14, 15, 16],
      cvcLength: [3],
      luhn: true
    }
  ];

  CreditCardNumberField = (function(_super) {
    __extends(CreditCardNumberField, _super);

    function CreditCardNumberField() {
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_paste_callback = __bind(this.format_paste_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref2 = CreditCardNumberField.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    CreditCardNumberField.prototype.restrict_field_callback = function(e, val) {
      var card;

      card = this.card_from_number(val);
      if (card) {
        return val.length <= card.length[card.length.length - 1];
      } else {
        return val.length <= 16;
      }
    };

    CreditCardNumberField.prototype.format_field_callback = function(e, $target, old_val, digit, new_val) {
      var card, length, re, upperLength;

      card = this.card_from_number(new_val);
      length = (old_val.replace(/\D/g, '') + digit).length;
      upperLength = 16;
      if (card) {
        upperLength = card.length[card.length.length - 1];
      }
      if (length >= upperLength) {
        return;
      }
      if (card && card.type === 'amex') {
        re = /^(\d{4}|\d{4}\s\d{6})$/;
      } else {
        re = /(?:^|\s)(\d{4})$/;
      }
      if (re.test(old_val)) {
        e.preventDefault();
        return $target.val(old_val + ' ' + digit);
      } else if (re.test(new_val)) {
        e.preventDefault();
        return $target.val(new_val + ' ');
      }
    };

    CreditCardNumberField.prototype.format_paste_callback = function(e, $target, val) {
      return $target.val(this.format_credit_card_number(val));
    };

    CreditCardNumberField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\d\s$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\d\s$/, ''));
      } else if (/\s\d?$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\s\d?$/, ''));
      }
    };

    CreditCardNumberField.prototype.format = function() {
      CreditCardNumberField.__super__.format.apply(this, arguments);
      this.field.on('keyup', this.set_card_type);
      return this;
    };

    CreditCardNumberField.prototype.card_from_number = function(num) {
      var card, _i, _len;

      num = (num + '').replace(/\D/g, '');
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        if (card.pattern.test(num)) {
          return card;
        }
      }
    };

    CreditCardNumberField.prototype.card_from_type = function(type) {
      var card, _i, _len;

      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        if (card.type === type) {
          return card;
        }
      }
    };

    CreditCardNumberField.prototype.credit_card_type = function(num) {
      var _ref3;

      if (!num) {
        return null;
      }
      return ((_ref3 = this.card_from_number(num)) != null ? _ref3.type : void 0) || null;
    };

    CreditCardNumberField.prototype.luhn_check = function(num) {
      var digit, digits, odd, sum, _i, _len;

      odd = true;
      sum = 0;
      digits = (num + '').split('').reverse();
      for (_i = 0, _len = digits.length; _i < _len; _i++) {
        digit = digits[_i];
        digit = parseInt(digit, 10);
        if ((odd = !odd)) {
          digit *= 2;
        }
        if (digit > 9) {
          digit -= 9;
        }
        sum += digit;
      }
      return sum % 10 === 0;
    };

    CreditCardNumberField.prototype.set_card_type = function(e) {
      var $target, allTypes, card, cardType, val;

      $target = $(e.currentTarget);
      val = $target.val();
      cardType = this.credit_card_type(val) || 'unknown';
      if (!$target.hasClass(cardType)) {
        allTypes = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = cards.length; _i < _len; _i++) {
            card = cards[_i];
            _results.push(card.type);
          }
          return _results;
        })();
        $target.removeClass('unknown');
        $target.removeClass(allTypes.join(' '));
        $target.addClass(cardType);
        $target.toggleClass('identified', cardType !== 'unknown');
        return $target.trigger('payment.cardType', cardType);
      }
    };

    CreditCardNumberField.prototype.format_credit_card_number = function(num) {
      var card, groups, upperLength, _ref3;

      card = this.card_from_number(num);
      if (!card) {
        return num;
      }
      upperLength = card.length[card.length.length - 1];
      num = num.replace(/\D/g, '');
      num = num.slice(0, +upperLength + 1 || 9e9);
      if (card.format.global) {
        return (_ref3 = num.match(card.format)) != null ? _ref3.join(' ') : void 0;
      } else {
        groups = card.format.exec(num);
        if (groups != null) {
          groups.shift();
        }
        return groups != null ? groups.join(' ') : void 0;
      }
    };

    CreditCardNumberField.prototype.validate = function() {
      var card, num, _ref3;

      num = this.field.val();
      num = (num + '').replace(/\s+|-/g, '');
      if (!/^\d+$/.test(num)) {
        return false;
      }
      card = this.card_from_number(num);
      if (!card) {
        return false;
      }
      return (_ref3 = num.length, __indexOf.call(card.length, _ref3) >= 0) && (card.luhn === false || this.luhn_check(num));
    };

    return CreditCardNumberField;

  })(NumericFormanceField);

  $.formance.fn.format_credit_card_number = function() {
    var field;

    field = new CreditCardNumberField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_credit_card_number = function() {
    var field;

    field = new CreditCardNumberField(this);
    return field.validate();
  };

  $.formance.credit_card_type = CreditCardNumberField.credit_card_type;

  $ = jQuery;

  DateDDMMMYYYYField = (function(_super) {
    __extends(DateDDMMMYYYYField, _super);

    function DateDDMMMYYYYField() {
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_forward_slash_callback = __bind(this.format_forward_slash_callback, this);
      this.format_forward_callback = __bind(this.format_forward_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref3 = DateDDMMMYYYYField.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    DateDDMMMYYYYField.prototype.restrict_field_callback = function(e, val) {
      if (val.length > 8) {
        return false;
      }
    };

    DateDDMMMYYYYField.prototype.format_field_callback = function(e, $target, old_val, digit, new_val) {
      if (/^\d$/.test(new_val) && (digit !== '0' && digit !== '1' && digit !== '2' && digit !== '3')) {
        e.preventDefault();
        return $target.val("0" + new_val + " / ");
      } else if (/^\d{2}$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " / ");
      } else if (/^\d{2}\s\/\s\d$/.test(new_val) && (digit !== '0' && digit !== '1')) {
        e.preventDefault();
        return $target.val("" + old_val + "0" + digit + " / ");
      } else if (/^\d{2}\s\/\s\d{2}$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " / ");
      }
    };

    DateDDMMMYYYYField.prototype.format_forward_callback = function(e, $target, val) {
      if (/^\d{2}$/.test(val) || /^\d{2}\s\/\s\d{2}$/.test(val)) {
        return $target.val("" + val + " / ");
      }
    };

    DateDDMMMYYYYField.prototype.format_forward_slash_callback = function(e, $target, val) {
      var date, day, month, parse_day, parse_month, _ref4;

      parse_day = /^(\d)$/;
      parse_month = /^(\d{2})\s\/\s(\d)$/;
      if (parse_day.test(val) && val !== '0') {
        return $target.val("0" + val + " / ");
      } else if (parse_month.test(val)) {
        _ref4 = val.match(parse_month), date = _ref4[0], day = _ref4[1], month = _ref4[2];
        if (month !== '0') {
          return $target.val("" + day + " / 0" + month + " / ");
        }
      }
    };

    DateDDMMMYYYYField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\d(\s|\/)+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\d(\s|\/)*$/, ''));
      } else if (/\s\/\s?\d?$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\s\/\s?\d?$/, ''));
      }
    };

    DateDDMMMYYYYField.prototype.validate = function() {
      var date, date_dict;

      date_dict = this.parse_date(this.field.val());
      date = this.val();
      if (!((date != null) && date instanceof Date)) {
        return false;
      }
      if (date.getDate() !== date_dict.day) {
        return false;
      }
      if (date.getMonth() + 1 !== date_dict.month) {
        return false;
      }
      if (date.getFullYear() !== date_dict.year) {
        return false;
      }
      return true;
    };

    DateDDMMMYYYYField.prototype.val = function() {
      var date;

      date = this.parse_date(this.field.val());
      if ((date.day == null) || isNaN(date.day)) {
        return false;
      }
      if ((date.month == null) || isNaN(date.month)) {
        return false;
      }
      if ((date.year == null) || isNaN(date.year)) {
        return false;
      }
      return new Date(date.year, date.month - 1, date.day);
    };

    DateDDMMMYYYYField.prototype.parse_date = function(date_string) {
      var day, month, year, _ref4;

      _ref4 = date_string != null ? date_string.replace(/\s/g, '').split('/', 3) : [NaN, NaN, NaN], day = _ref4[0], month = _ref4[1], year = _ref4[2];
      if (!((year != null) && year.length === 4)) {
        year = NaN;
      }
      day = parseInt(day, 10);
      month = parseInt(month, 10);
      year = parseInt(year, 10);
      return {
        day: day,
        month: month,
        year: year
      };
    };

    return DateDDMMMYYYYField;

  })(NumericFormanceField);

  $.formance.fn.format_dd_mm_yyyy = function() {
    var field;

    field = new DateDDMMMYYYYField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_dd_mm_yyyy = function() {
    var field;

    field = new DateDDMMMYYYYField(this);
    return field.validate();
  };

  $.formance.fn.val_dd_mm_yyyy = function() {
    var field;

    field = new DateDDMMMYYYYField(this);
    return field.val();
  };

  $ = jQuery;

  EmailField = (function(_super) {
    __extends(EmailField, _super);

    function EmailField() {
      _ref4 = EmailField.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    EmailField.prototype.format = function() {
      return this;
    };

    EmailField.prototype.validate = function() {
      var algorithms, val, validator;

      algorithms = {
        simple: /^\S+@\S+$/,
        complex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\ ".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA -Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
      };
      val = this.field.val();
      if (val == null) {
        return false;
      }
      validator = this.field.data('formance_algorithm');
      if ((validator != null) && validator in algorithms) {
        return algorithms[validator].test(val);
      }
      return algorithms['simple'].test(val);
    };

    return EmailField;

  })(FormanceField);

  $.formance.fn.format_email = function() {
    var field;

    field = new EmailField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_email = function() {
    var field;

    field = new EmailField(this);
    return field.validate();
  };

  $ = jQuery;

  NumberField = (function(_super) {
    __extends(NumberField, _super);

    function NumberField() {
      var length, vars;

      vars = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      NumberField.__super__.constructor.apply(this, arguments);
      length = this.field.data('formance_length');
      if (length != null) {
        this.field.attr('maxLength', length);
      }
    }

    NumberField.prototype.validate = function() {
      var length, val;

      val = this.field.val();
      length = this.field.data('formance_length');
      if ((length != null) && (typeof length === 'number') && (val.length !== length)) {
        return false;
      }
      if ((length != null) && typeof length === 'string' && length !== '') {
        if (isNaN(parseInt(length, 10))) {
          return false;
        }
        if (val.length !== parseInt(length, 10)) {
          return false;
        }
      }
      return /^\d+$/.test(val);
    };

    return NumberField;

  })(NumericFormanceField);

  $.formance.fn.format_number = function() {
    var field;

    field = new NumberField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_number = function() {
    var field;

    field = new NumberField(this);
    return field.validate();
  };

  $ = jQuery;

  OntarioDriversLicenseNumberField = (function(_super) {
    __extends(OntarioDriversLicenseNumberField, _super);

    function OntarioDriversLicenseNumberField() {
      this.format_paste_callback = __bind(this.format_paste_callback, this);
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref5 = OntarioDriversLicenseNumberField.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    OntarioDriversLicenseNumberField.prototype.restrict_field_callback = function(e, val) {
      if (val.length > 15) {
        return false;
      }
    };

    OntarioDriversLicenseNumberField.prototype.format_field_callback = function(e, $target, old_val, input, new_val) {
      old_val = old_val.toUpperCase();
      input = input.toUpperCase();
      new_val = new_val.toUpperCase();
      if (/^[A-Z]$/i.test(new_val) || /^[A-Z]\d{0,4}$/i.test(new_val) || /^[A-Z]\d{4}[\s|\-]*\d{0,5}$/i.test(new_val) || /^[A-Z]\d{4}[\s|\-]*\d{5}[\s|\-]*\d{0,5}$/i.test(new_val)) {
        e.preventDefault();
        $target.val(new_val);
      }
      if (/^[A-Z]\d{4}$/.test(new_val) || /^[A-Z]\d{4}[\s|\-]*\d{5}$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " - ");
      }
    };

    OntarioDriversLicenseNumberField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\d(\s|\-)+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\d(\s|\-)+$/, ''));
      }
    };

    OntarioDriversLicenseNumberField.prototype.format_paste_callback = function(e, $target, val) {
      var first5, full, last5, middle5, _ref6;

      _ref6 = val.match(/^([A-Z\d]{5})[\s|\-]*(\d{5})[\s|\-]*(\d{5})$/i), full = _ref6[0], first5 = _ref6[1], middle5 = _ref6[2], last5 = _ref6[3];
      return $target.val("" + first5 + " - " + middle5 + " - " + last5);
    };

    OntarioDriversLicenseNumberField.prototype.validate = function() {
      var regex, val;

      val = this.field.val();
      regex = /^[A-Z]\d{4}[\s|\-]*\d{5}[\s|\-]*\d{5}$/i;
      return regex.test(val);
    };

    return OntarioDriversLicenseNumberField;

  })(AlphanumericFormanceField);

  $.formance.fn.format_ontario_drivers_license_number = function() {
    var field;

    field = new OntarioDriversLicenseNumberField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_ontario_drivers_license_number = function() {
    var field;

    field = new OntarioDriversLicenseNumberField(this);
    return field.validate();
  };

  $ = jQuery;

  OntarioOutdoorsCardNumberField = (function(_super) {
    __extends(OntarioOutdoorsCardNumberField, _super);

    function OntarioOutdoorsCardNumberField() {
      this.format_paste_callback = __bind(this.format_paste_callback, this);
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_callback = __bind(this.restrict_callback, this);      _ref6 = OntarioOutdoorsCardNumberField.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    OntarioOutdoorsCardNumberField.prototype.restrict_callback = function(e, val) {
      if (value.length > 15) {
        return false;
      }
    };

    OntarioOutdoorsCardNumberField.prototype.format_field_callback = function(e, $target, old_val, digit, new_val) {
      var val;

      if (old_val === '') {
        e.preventDefault();
        val = /^7$/.test(new_val) ? "708158 " : "708158 " + new_val;
        return $target.val(val);
      } else if (/^\d{5}$/.test(old_val)) {
        e.preventDefault();
        if (/^\d{6}$/.test(new_val)) {
          val = "" + new_val + " ";
        }
        if (/^\d{6}\s*$/.test(val)) {
          return target.val(val);
        }
      }
    };

    OntarioOutdoorsCardNumberField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/708158\s+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/708158\s+$/, ''));
      }
    };

    OntarioOutdoorsCardNumberField.prototype.format_paste_callback = function(e, $target, val) {
      var first6, full, last9, _ref7;

      _ref7 = val.match(/^(\d{6})\s*(\d{9})$/), full = _ref7[0], first6 = _ref7[1], last9 = _ref7[2];
      return $target.val("" + first6 + " " + last9);
    };

    OntarioOutdoorsCardNumberField.prototype.validate = function() {
      var regex, val;

      val = this.field.val();
      if (val == null) {
        return false;
      }
      regex = /^708158\s*\d{9}$/;
      return regex.test(val);
    };

    return OntarioOutdoorsCardNumberField;

  })(NumericFormanceField);

  $.formance.fn.format_ontario_outdoors_card_number = function() {
    var field;

    field = new OntarioOutdoorsCardNumberField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_ontario_outdoors_card_number = function() {
    var field;

    field = new OntarioOutdoorsCardNumberField(this);
    return field.validate();
  };

  $ = jQuery;

  OntarioPhotoHealthCardNumberField = (function(_super) {
    __extends(OntarioPhotoHealthCardNumberField, _super);

    function OntarioPhotoHealthCardNumberField() {
      this.format_paste_callback = __bind(this.format_paste_callback, this);
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref7 = OntarioPhotoHealthCardNumberField.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    OntarioPhotoHealthCardNumberField.prototype.restrict_field_callback = function(e, val) {
      if (val.length > 12) {
        return false;
      }
    };

    OntarioPhotoHealthCardNumberField.prototype.format_field_callback = function(e, $target, old_val, input, new_val) {
      old_val = old_val.toUpperCase();
      input = input.toUpperCase();
      new_val = new_val.toUpperCase();
      if (/^\d{0,4}$/.test(new_val) || /^\d{4}[\s|\-]*\d{0,3}$/.test(new_val) || /^\d{4}[\s|\-]*\d{3}[\s|\-]*\d{0,3}$/.test(new_val) || /^\d{4}[\s|\-]*\d{3}[\s|\-]*\d{3}[\s|\-]*[A-Z]{0,2}$/i.test(new_val)) {
        e.preventDefault();
        $target.val(new_val);
      }
      if (/^\d{4}$/.test(new_val) || /^\d{4}[\s|\-]*\d{3}$/.test(new_val) || /^\d{4}[\s|\-]*\d{3}[\s|\-]*\d{3}$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " - ");
      }
    };

    OntarioPhotoHealthCardNumberField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\d(\s|\-)+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\d(\s|\-)+$/, ''));
      }
    };

    OntarioPhotoHealthCardNumberField.prototype.format_paste_callback = function(e, $target, val) {
      var first4, full, last2, second3, third3, _ref8;

      _ref8 = val.match(/^(\d{4})[\s|\-]*(\d{3})[\s|\-]*(\d{3})[\s|\-]*([A-Z]{2})$/i), full = _ref8[0], first4 = _ref8[1], second3 = _ref8[2], third3 = _ref8[3], last2 = _ref8[4];
      return $target.val("" + first4 + " - " + second3 + " - " + third3 + " - " + last2);
    };

    OntarioPhotoHealthCardNumberField.prototype.validate = function() {
      var regex, val;

      val = this.field.val();
      if (val == null) {
        return false;
      }
      regex = /^\d{4}[\s|\-]*\d{3}[\s|\-]*\d{3}[\s|\-]*[A-Z]{2}$/i;
      return regex.test(val);
    };

    return OntarioPhotoHealthCardNumberField;

  })(AlphanumericFormanceField);

  $.formance.fn.format_ontario_photo_health_card_number = function() {
    var field;

    field = new OntarioPhotoHealthCardNumberField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_ontario_photo_health_card_number = function() {
    var field;

    field = new OntarioPhotoHealthCardNumberField(this);
    return field.validate();
  };

  $ = jQuery;

  PhoneNumberField = (function(_super) {
    __extends(PhoneNumberField, _super);

    function PhoneNumberField() {
      this.format_paste_callback = __bind(this.format_paste_callback, this);
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_callback = __bind(this.restrict_callback, this);      _ref8 = PhoneNumberField.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    PhoneNumberField.prototype.restrict_callback = function(e, val) {
      if (value.length > 10) {
        return false;
      }
    };

    PhoneNumberField.prototype.format_field_callback = function(e, $target, old_val, digit, new_val) {
      var text;

      e.preventDefault();
      text = this.reformat_phone_number(new_val);
      return $target.val(text);
    };

    PhoneNumberField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\(\d$/.test(value)) {
        e.preventDefault();
        return $target.val('');
      } else if (/\d\)(\s)+$/.test(value)) {
        e.preventDefault();
        return $target.val(value.replace(/\d\)(\s)*$/, ''));
      } else if (/\d(\s|\-)+$/.test(value)) {
        e.preventDefault();
        return $target.val(value.replace(/\d(\s|\-)+$/, ''));
      }
    };

    PhoneNumberField.prototype.format_paste_callback = function(e, $target, val) {
      var text;

      text = this.reformat_phone_number(val);
      return $target.val(text);
    };

    PhoneNumberField.prototype.reformat_phone_number = function(phone_string) {
      var areaCode, first3, last4, phoneNumber, text, _ref9;

      phoneNumber = phone_string.replace(/\D/g, '').match(/^(\d{0,3})?(\d{0,3})?(\d{0,4})?$/);
      _ref9 = phoneNumber, phoneNumber = _ref9[0], areaCode = _ref9[1], first3 = _ref9[2], last4 = _ref9[3];
      text = '';
      if (areaCode != null) {
        text += "(" + areaCode;
      }
      if ((areaCode != null ? areaCode.length : void 0) === 3) {
        text += ") ";
      }
      if (first3 != null) {
        text += "" + first3;
      }
      if ((first3 != null ? first3.length : void 0) === 3) {
        text += " - ";
      }
      if (last4 != null) {
        text += "" + last4;
      }
      return text;
    };

    PhoneNumberField.prototype.validate = function() {
      var val;

      val = this.field.val();
      if (val == null) {
        return false;
      }
      val = val.replace(/\(|\)|\s+|-/g, '');
      if (!/^\d+$/.test(val)) {
        return false;
      }
      return val.replace(/\D/g, '').length === 10;
    };

    return PhoneNumberField;

  })(AlphanumericFormanceField);

  $.formance.fn.format_phone_number = function() {
    var field;

    field = new PhoneNumberField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_phone_number = function() {
    var field;

    field = new PhoneNumberField(this);
    return field.validate();
  };

  $ = jQuery;

  PostalCodeField = (function(_super) {
    __extends(PostalCodeField, _super);

    function PostalCodeField() {
      this.format_paste_callback = __bind(this.format_paste_callback, this);
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref9 = PostalCodeField.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    PostalCodeField.prototype.restrict_field_callback = function(e, val) {
      if (val.length > 6) {
        return false;
      }
    };

    PostalCodeField.prototype.format_field_callback = function(e, $target, old_val, char, new_val) {
      if (old_val === '') {
        e.preventDefault();
        if (/^[ABCEFGHJKLMNPRSTVXY]$/.test(new_val)) {
          return $target.val(new_val);
        }
      } else if (/^[ABCEFGHJKLMNPRSTVXY]$/.test(old_val)) {
        e.preventDefault();
        if (/^[ABCEFGHJKLMNPRSTVXY][0-9]$/.test(new_val)) {
          return $target.val(new_val);
        }
      } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9]$/.test(old_val)) {
        e.preventDefault();
        if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]$/.test(new_val)) {
          return $target.val("" + new_val + " ");
        }
      } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s$/.test(old_val)) {
        e.preventDefault();
        if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9]$/.test(new_val)) {
          return $target.val(new_val);
        }
      } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9]$/.test(old_val)) {
        e.preventDefault();
        if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ]$/.test(new_val)) {
          return $target.val(new_val);
        }
      } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ]$/.test(old_val)) {
        e.preventDefault();
        if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ][0-9]$/.test(new_val)) {
          return $target.val(new_val);
        }
      }
    };

    PostalCodeField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/[ABCEFGHJKLMNPRSTVWXYZ](\s)+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/[ABCEFGHJKLMNPRSTVWXYZ](\s)*$/, ''));
      }
    };

    PostalCodeField.prototype.format_paste_callback = function(e, $target, val) {
      var first_part, full, second_part, _ref10;

      _ref10 = val.match(/^([ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ])\s?([0-9][ABCEFGHJKLMNPRSTVWXYZ][0-9])$/), full = _ref10[0], first_part = _ref10[1], second_part = _ref10[2];
      return $target.val("" + first_part + " " + second_part);
    };

    PostalCodeField.prototype.validate = function() {
      var val;

      val = this.field.val();
      if (val == null) {
        return false;
      }
      val = val.replace(/\s+/g, '');
      if (!/^[a-zA-Z\d]+$/.test(val)) {
        return false;
      }
      val = val.replace(/[^a-zA-Z\d]/g, '');
      return /^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ][0-9]$/.test(val.toUpperCase());
    };

    return PostalCodeField;

  })(AlphanumericFormanceField);

  $.formance.fn.format_postal_code = function() {
    var field;

    field = new PostalCodeField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_postal_code = function() {
    var field;

    field = new PostalCodeField(this);
    return field.validate();
  };

  $ = jQuery;

  DateYYYYMMDDField = (function(_super) {
    __extends(DateYYYYMMDDField, _super);

    function DateYYYYMMDDField() {
      this.format_backspace_callback = __bind(this.format_backspace_callback, this);
      this.format_forward_slash_callback = __bind(this.format_forward_slash_callback, this);
      this.format_forward_callback = __bind(this.format_forward_callback, this);
      this.format_field_callback = __bind(this.format_field_callback, this);
      this.restrict_field_callback = __bind(this.restrict_field_callback, this);      _ref10 = DateYYYYMMDDField.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    DateYYYYMMDDField.prototype.restrict_field_callback = function(e, val) {
      if (val.length > 8) {
        return false;
      }
    };

    DateYYYYMMDDField.prototype.format_field_callback = function(e, $target, old_val, digit, new_val) {
      if (/^\d{4}$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " / ");
      } else if (/^\d{4}\s\/\s\d$/.test(new_val) && (digit !== '0' && digit !== '1')) {
        e.preventDefault();
        return $target.val("" + old_val + "0" + digit + " / ");
      } else if (/^\d{4}\s\/\s\d{2}$/.test(new_val)) {
        e.preventDefault();
        return $target.val("" + new_val + " / ");
      } else if (/^\d{4}\s\/\s\d{2}\s\/\s\d$/.test(new_val) && (digit !== '0' && digit !== '1' && digit !== '2' && digit !== '3')) {
        e.preventDefault();
        return $target.val("" + old_val + "0" + digit);
      }
    };

    DateYYYYMMDDField.prototype.format_forward_callback = function(e, $target, val) {
      if (/^\d{4}$/.test(val) || /^\d{4}\s\/\s\d{2}$/.test(val)) {
        return $target.val("" + val + " / ");
      }
    };

    DateYYYYMMDDField.prototype.format_forward_slash_callback = function(e, $target, val) {
      var date, month, parse_month, year, _ref11;

      parse_month = /^(\d{4})\s\/\s(\d)$/;
      if (parse_month.test(val)) {
        _ref11 = val.match(parse_month), date = _ref11[0], year = _ref11[1], month = _ref11[2];
        if (month !== '0') {
          return $target.val("" + year + " / 0" + month + " / ");
        }
      }
    };

    DateYYYYMMDDField.prototype.format_backspace_callback = function(e, $target, val) {
      if (/\d(\s|\/)+$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\d(\s|\/)*$/, ''));
      } else if (/\s\/\s?\d?$/.test(val)) {
        e.preventDefault();
        return $target.val(val.replace(/\s\/\s?\d?$/, ''));
      }
    };

    DateYYYYMMDDField.prototype.validate = function() {
      var date, date_dict;

      date_dict = this.parse_date(this.field.val());
      date = this.val();
      if (!((date != null) && date instanceof Date)) {
        return false;
      }
      if (date.getDate() !== date_dict.day) {
        return false;
      }
      if (date.getMonth() + 1 !== date_dict.month) {
        return false;
      }
      if (date.getFullYear() !== date_dict.year) {
        return false;
      }
      return true;
    };

    DateYYYYMMDDField.prototype.val = function() {
      var date;

      date = this.parse_date(this.field.val());
      if ((date.day == null) || isNaN(date.day)) {
        return false;
      }
      if ((date.month == null) || isNaN(date.month)) {
        return false;
      }
      if ((date.year == null) || isNaN(date.year)) {
        return false;
      }
      return new Date(date.year, date.month - 1, date.day);
    };

    DateYYYYMMDDField.prototype.parse_date = function(date_string) {
      var day, month, year, _ref11;

      _ref11 = date_string != null ? date_string.replace(/\s/g, '').split('/', 3) : [NaN, NaN, NaN], year = _ref11[0], month = _ref11[1], day = _ref11[2];
      if (!((year != null) && year.length === 4)) {
        year = NaN;
      }
      day = parseInt(day, 10);
      month = parseInt(month, 10);
      year = parseInt(year, 10);
      return {
        day: day,
        month: month,
        year: year
      };
    };

    return DateYYYYMMDDField;

  })(NumericFormanceField);

  $.formance.fn.format_yyyy_mm_dd = function() {
    var field;

    field = new DateYYYYMMDDField(this);
    field.format();
    return this;
  };

  $.formance.fn.validate_yyyy_mm_dd = function() {
    var field;

    field = new DateYYYYMMDDField(this);
    return field.validate();
  };

  $.formance.fn.val_yyyy_mm_dd = function() {
    var field;

    field = new DateYYYYMMDDField(this);
    return field.val();
  };

}).call(this);
