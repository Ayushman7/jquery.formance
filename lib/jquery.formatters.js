// Generated by CoffeeScript 1.6.2
(function() {
  var $, formatBackDate, formatBackPhoneNumber, formatBackPostalCode, formatDate, formatForwardDate, formatForwardSlash, formatPastePhoneNumber, formatPastePostalCode, formatPhoneNumber, formatPostalCode, hasTextSelected, reFormatPhoneNumber, restrictAlphaNumeric, restrictDate, restrictNumeric, restrictPhoneNumber, restrictPostalCode,
    __slice = [].slice;

  require('./jquery.payment');

  $ = jQuery;

  $.formatters = {};

  $.formatters.fn = {};

  $.fn.formatters = function() {
    var args, method;

    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return $.formatters.fn[method].apply(this, args);
  };

  hasTextSelected = function($target) {
    var _ref;

    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
      return true;
    }
    if (typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? typeof _ref.createRange === "function" ? _ref.createRange().text : void 0 : void 0 : void 0) {
      return true;
    }
    return false;
  };

  restrictNumeric = function(e) {
    var input;

    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\s]/.test(input);
  };

  restrictAlphaNumeric = function(e) {
    var input;

    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\sA-Za-z]/.test(input);
  };

  restrictDate = function(e) {
    var $target, digit, value;

    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 8) {
      return false;
    }
  };

  formatDate = function(e) {
    var $target, digit, old_val, val;

    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    old_val = $target.val();
    val = old_val + digit;
    if (/^\d$/.test(val) && (digit !== '0' && digit !== '1' && digit !== '2' && digit !== '3')) {
      e.preventDefault();
      return $target.val("0" + val + " / ");
    } else if (/^\d{2}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " / ");
    } else if (/^\d{2}\s\/\s\d$/.test(val) && (digit !== '0' && digit !== '1')) {
      e.preventDefault();
      return $target.val("" + old_val + "0" + digit + " / ");
    } else if (/^\d{2}\s\/\s\d{2}$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " / ");
    }
  };

  formatForwardDate = function(e) {
    var $target, digit, val;

    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    if (/^\d{2}$/.test(val) || /^\d{2}\s\/\s\d{2}$/.test(val)) {
      return $target.val("" + val + " / ");
    }
  };

  formatForwardSlash = function(e) {
    var $target, date, day, month, parse_day, parse_month, slash, val, _ref;

    slash = String.fromCharCode(e.which);
    if (slash !== '/') {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    parse_day = /^(\d)$/;
    parse_month = /^(\d{2})\s\/\s(\d)$/;
    if (parse_day.test(val) && val !== '0') {
      return $target.val("0" + val + " / ");
    } else if (parse_month.test(val)) {
      _ref = val.match(parse_month), date = _ref[0], day = _ref[1], month = _ref[2];
      if (month !== '0') {
        return $target.val("" + day + " / 0" + month + " / ");
      }
    }
  };

  formatBackDate = function(e) {
    var $target, value;

    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d(\s|\/)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d(\s|\/)*$/, ''));
    } else if (/\s\/\s?\d?$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\s\/\s?\d?$/, ''));
    }
  };

  reFormatPhoneNumber = function(phone_number_string) {
    var area_code, first3, last4, phone_number, text, _ref;

    _ref = phone_number_string.replace(/\D/g, '').match(/^(\d{0,3})?(\d{0,3})?(\d{0,4})?$/), phone_number = _ref[0], area_code = _ref[1], first3 = _ref[2], last4 = _ref[3];
    text = '';
    if (area_code != null) {
      text += "(" + area_code;
    }
    if ((area_code != null ? area_code.length : void 0) === 3) {
      text += ") ";
    }
    if (first3 != null) {
      text += "" + first3;
    }
    if ((first3 != null ? first3.length : void 0) === 3) {
      text += " - ";
    }
    if (last4 != null) {
      text += "" + last4;
    }
    return text;
  };

  restrictPhoneNumber = function(e) {
    var $target, digit, value;

    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 10) {
      return false;
    }
  };

  formatPhoneNumber = function(e) {
    var $target, digit, text, val;

    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val() + digit;
    text = reFormatPhoneNumber(val);
    e.preventDefault();
    return $target.val(text);
  };

  formatBackPhoneNumber = function(e) {
    var $target, value;

    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\(\d$/.test(value)) {
      e.preventDefault();
      return $target.val('');
    } else if (/\d\)(\s)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d\)(\s)*$/, ''));
    } else if (/\d(\s|\-)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d(\s|\-)+$/, ''));
    }
  };

  formatPastePhoneNumber = function(e) {
    var _this = this;

    return setTimeout(function() {
      var $target, text, val;

      $target = $(e.currentTarget);
      val = $target.val();
      text = reFormatPhoneNumber(val);
      return $target.val(text);
    });
  };

  restrictPostalCode = function(e) {
    var $target, char, value;

    $target = $(e.currentTarget);
    char = String.fromCharCode(e.which);
    if (!/^[a-zA-Z\d]+$/.test(char)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + char;
    value = value.replace(/[^a-zA-Z\d]/g, '');
    if (value.length > 6) {
      return false;
    }
  };

  formatPostalCode = function(e) {
    var $target, char, old_val, val;

    char = String.fromCharCode(e.which);
    if (!/^[a-zA-Z\d]+$/.test(char)) {
      return;
    }
    $target = $(e.currentTarget);
    old_val = $target.val();
    val = old_val + char.toUpperCase();
    if (old_val === '') {
      e.preventDefault();
      if (/^[ABCEFGHJKLMNPRSTVXY]$/.test(val)) {
        return $target.val(val);
      }
    } else if (/^[ABCEFGHJKLMNPRSTVXY]$/.test(old_val)) {
      e.preventDefault();
      if (/^[ABCEFGHJKLMNPRSTVXY][0-9]$/.test(val)) {
        return $target.val(val);
      }
    } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9]$/.test(old_val)) {
      e.preventDefault();
      if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]$/.test(val)) {
        return $target.val("" + val + " ");
      }
    } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s$/.test(old_val)) {
      e.preventDefault();
      if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9]$/.test(val)) {
        return $target.val(val);
      }
    } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9]$/.test(old_val)) {
      e.preventDefault();
      if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ]$/.test(val)) {
        return $target.val(val);
      }
    } else if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ]$/.test(old_val)) {
      e.preventDefault();
      if (/^[ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ]\s?[0-9][ABCEFGHJKLMNPRSTVWXYZ][0-9]$/.test(val)) {
        return $target.val(val);
      }
    }
  };

  formatBackPostalCode = function(e) {
    var $target, value;

    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/[ABCEFGHJKLMNPRSTVWXYZ](\s)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/[ABCEFGHJKLMNPRSTVWXYZ](\s)*$/, ''));
    }
  };

  formatPastePostalCode = function(e) {
    var _this = this;

    return setTimeout(function() {
      var $target, first_part, full, second_part, val, _ref;

      $target = $(e.currentTarget);
      val = $target.val();
      _ref = val.match(/^([ABCEFGHJKLMNPRSTVXY][0-9][ABCEFGHJKLMNPRSTVWXYZ])\s?([0-9][ABCEFGHJKLMNPRSTVWXYZ][0-9])$/), full = _ref[0], first_part = _ref[1], second_part = _ref[2];
      return $target.val("" + first_part + " " + second_part);
    });
  };

  $.formatters.fn.formatCardNumber = function() {
    this.payment('formatCardNumber');
    return this;
  };

  $.formatters.fn.formatCardExpiry = function() {
    this.payment('formatCardExpiry');
    return this;
  };

  $.formatters.fn.formatCardCVC = function() {
    this.payment('formatCardCVC');
    return this;
  };

  $.formatters.fn.formatDate = function() {
    this.formatters('restrictNumeric');
    this.on('keypress', restrictDate);
    this.on('keypress', formatDate);
    this.on('keypress', formatForwardSlash);
    this.on('keypress', formatForwardDate);
    this.on('keydown', formatBackDate);
    return this;
  };

  $.formatters.fn.formatNumber = function() {
    this.formatters('restrictNumeric');
    return this;
  };

  $.formatters.fn.formatPhoneNumber = function() {
    this.formatters('restrictNumeric');
    this.on('keypress', restrictPhoneNumber);
    this.on('keypress', formatPhoneNumber);
    this.on('keydown', formatBackPhoneNumber);
    this.on('paste', formatPastePhoneNumber);
    return this;
  };

  $.formatters.fn.formatPostalCode = function() {
    this.formatters('restrictAlphaNumeric');
    this.on('keypress', restrictPostalCode);
    this.on('keypress', formatPostalCode);
    this.on('keydown', formatBackPostalCode);
    this.on('paste', formatPastePostalCode);
    return this;
  };

  $.formatters.fn.restrictNumeric = function() {
    this.on('keypress', restrictNumeric);
    return this;
  };

  $.formatters.fn.restrictAlphaNumeric = function() {
    this.on('keypress', restrictAlphaNumeric);
    return this;
  };

}).call(this);
